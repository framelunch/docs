[
{
	"uri": "https://framelunch.github.io/docs/tools/page-1/",
	"title": "HUGO",
	"tags": [],
	"description": "",
	"content": " Links 記事を書く時によく見るリンクとか\n小技とか追記していく\nCONFIGの編集 各プロジェクトの config.toml を編集する\n記法: Short Code "
},
{
	"uri": "https://framelunch.github.io/docs/install/page-1/",
	"title": "Install",
	"tags": [],
	"description": "",
	"content": " 1. Docker for Macをインストールしましょう 最新のDockerが利用できるEdge版 の\nDocker for Mac をインストールしましょう\n※ Stable版が入っている人はそのままでいいです\n2. ソースファイルの取得 WORKSHOP_DIR=インストールするディレクトリパス PROJECT_NAME=docs cd ${WORKSHOP_DIR} git clone git@github.com:framelunch/docs.git ./${PROJECT_NAME} cd ${PROJECT_NAME}  WORKSHOP_DIR は絶対パスで指定してください\nカレントディレクトリの絶対パスは pwd で取得できます\n 3. コマンドをインストール docsコマンドを利用できるようにします\nmake  アンインストールは make uninstall です\nインストール時に /usr/local/bin/docs にコマンドのシンボリックリンクを作成しているので\nそれを削除しているだけです。\n 4. 試しにコマンドのUsageを表示してみましょう docs  下記のような説明が表示されるはずです。\nHOW TO USE ... Usage: docs [Command] [Command Arguments] ※ [Command Arguments]の先頭に ! が付いているものは必須パラメータです Command: ##### 設定を行う ##### # Current Documentの切り替え switch -i [! Document ID] # Document設定の削除 remove -i [! Document ID] ##### ドキュメントを作る ##### # 新しいドキュメントを作る new -i [! Document ID] -w [! Document work directory(Mark Downを置くディレクトリ)] -b [! Document build directory(Web Rootディレクトリ)] # 既存のローカルにあるドキュメントを追加する add -i [! Document ID] -w [! Document work directory(Mark Downを置くディレクトリ)] -b [! Document build directory(Web Rootディレクトリ)] # new, add コマンドで指定した設定の更新 configure -i [! Document ID] -w [Document work directory(Mark Downを置くディレクトリ)] -b [Document build directory(Web Rootディレクトリ)] # ドキュメントに新しいページを追加する post -p [! ページのファイルパス (例: _index.md, /news/_index.md, /news/page-1.md)] ##### ドキュメントを見る ##### preview -i [Document ID] ##### ドキュメントを出力する ##### build -i [Document ID] ##### その他 ##### # Docs の Dockerを再起動します reboot -f [付けると強制的にダウンしてから再起動]  "
},
{
	"uri": "https://framelunch.github.io/docs/reference/page-1/",
	"title": "テーマの変更をする方法",
	"tags": [],
	"description": "",
	"content": "今後書く\n"
},
{
	"uri": "https://framelunch.github.io/docs/install/page-2/",
	"title": "Docsを配置する準備",
	"tags": [],
	"description": "",
	"content": " 早速、サンプルプロジェクトのドキュメントを作成する流れを説明します。\nまずは「どこにドキュメントを配置するのか」を決めましょう。\n1. DocumentのIDを決めましょう 今回は、Document IDを「 sample 」とします\n一緒に作成しましょう。\ncd ${WORKSHOP_DIR} DOCUMENT_ID=sample SAMPLE_PROJECT_DIR=${WORKSHOP_DIR}/${DOCUMENT_ID} mkdir -p ${SAMPLE_PROJECT_DIR}  2. MarkDownファイル等を配置する場所を決めましょう 今回は「 ${SAMPLE_PROJECT_DIR}/docs-src 」とします\nWORK_DIR=${SAMPLE_PROJECT_DIR}/docs-src  3. Documentのビルド先を指定しましょう 今回は「 ${SAMPLE_PROJECT_DIR}/docs 」とします\nBUILD_DIR=${SAMPLE_PROJECT_DIR}/docs  4. 意図した設定になっているか確認しましょう cat \u0026lt;\u0026lt;- EOF SAMPLE_PROJECT_DIR: ${SAMPLE_PROJECT_DIR} DOCUMENT_ID: ${DOCUMENT_ID} WORK_DIR: ${WORK_DIR} BUILD_DIR: ${BUILD_DIR} EOF  "
},
{
	"uri": "https://framelunch.github.io/docs/tools/page-2/",
	"title": "learn",
	"tags": [],
	"description": "",
	"content": " Links 記事を書く時によく見るリンクとか追記していく\n素敵Notice 感動Chart "
},
{
	"uri": "https://framelunch.github.io/docs/install/page-3/",
	"title": "Docsの作成",
	"tags": [],
	"description": "",
	"content": " 実際にソースファイルを作成していきます。\n1. ソースファイルのひな形を生成します docs new -i ${DOCUMENT_ID} -w ${WORK_DIR} -b ${BUILD_DIR}  成功すると ${WORK_DIR} に下記のようなひな形が作成されます\ngraph LR; A[WORK_DIR] -- |MarkDown置き場| B A[WORK_DIR] -- |ビルド結果| C A[WORK_DIR] -- |テーマファイル| D A[WORK_DIR] -- |その他省略| E B[content] C[public] D[themes] E[other]  Docs Managerの command/config 以下に設定ファイルが作成されます。\n同時に .env ファイル の内容が、今作成した設定ファイルと同じものになっています。\nこの .env ファイルの内容が、カレントドキュメント(今指定されているDocument) です。\nコマンドでドキュメントを指定しない場合は、この カレントドキュメント を自動で対象にします。\n複数の設定ファイルがある場合は switchコマンド によって カレントドキュメント を切り替えます。\n 2. 早速コンテンツを配置してみましょう 下記の3ファイルを配置してみましょう\n _index.md (Topページ) news/_index.md (/news/ ページ) news/page-1.md (/news/ コンテンツ1)  下記を1行ずつ実行します。\ndocs post -p _index.md\ndocs post -p news/_index.md\ndocs post -p news/page-1.md\n${WORK_DIR} の contentディレクトリ に作成されます。\n 作成されたページに目印を追記してみてください {{% notice note %}} Topページ {{% /notice %}}  {{% notice tip %}} NewsのTopページ {{% /notice %}}  {{% notice warning %}} Newsコンテンツ1 {{% /notice %}}  3. サーバー上でコンテンツを確認してみましょう 下記のコマンドで簡易的なWebサーバーを立ち上げて\ndocs preview  http://localhost:1313 にアクセスしましょう\n表示できたでしょうか？\n_index.md をさらに編集して、ファイルを保存してみてください。\n親切にも Auto Reload 機能が付いているので\n快適に編集できますね。\n 4. 静的サイトをビルドしましょう docs build  成功すると ${BUILD_DIR} にビルドされています。\nGitHubなら、これをpushして(ちょっと設定して)あげればドキュメントが公開できます。\nDockerを利用すれば、ドキュメント用のWebサーバーを立ち上げることも\n簡単にできますが、、、その説明はまたいずれ。\nもっと知りたい人は HUGO や 利用しているテーマ についての情報をここにまとめていきます。\nみなさんも是非追記してくださいね！\n"
},
{
	"uri": "https://framelunch.github.io/docs/",
	"title": "Docs Manager",
	"tags": [],
	"description": "",
	"content": " Docs Manager by HUGO Outline ドキュメントを作る際に\nLocalに静的サイトジェネレータが欲しかったからHUGOで作ってみた。\nLocalにインストールはしたくないからDockerで。\nGitHubにデプロイすることとかは考えていません。\n(やりたいときはこうやってやるみたい)\n1. Getting Started. このドキュメントについて "
},
{
	"uri": "https://framelunch.github.io/docs/install/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": " 目次 インストール Docsを配置する準備 Docsの作成 "
},
{
	"uri": "https://framelunch.github.io/docs/reference/",
	"title": "Reference",
	"tags": [],
	"description": "",
	"content": "まだ作ってないけど、記事を追加していきたいなぁ。\n"
},
{
	"uri": "https://framelunch.github.io/docs/tools/",
	"title": "Tools",
	"tags": [],
	"description": "",
	"content": " Site Generator: HUGO Theme: learn "
},
{
	"uri": "https://framelunch.github.io/docs/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://framelunch.github.io/docs/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]